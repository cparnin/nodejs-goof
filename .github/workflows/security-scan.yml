name: Security Scan

# Copy this file to: .github/workflows/security-scan.yml
# Drop-in workflow for client repositories - no customization needed
# Requires AWS secrets for Bedrock (recommended) or OpenAI API key (legacy):
#   - AWS_ACCESS_KEY_ID
#   - AWS_SECRET_ACCESS_KEY
#   - AWS_REGION (optional, defaults to us-east-1)

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  security-scan:
    name: AppSec Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run AppSec AI Scanner
        id: scanner
        timeout-minutes: 8
        uses: imaginexconsulting/IX-Guard@main  # Always uses latest - no version management needed
        env:
          GH_TOKEN: ${{ github.token }}
          #APPSEC_AUTO_FIX_DELAY: '2'  # Optional: Add 2-second delay between fixes to prevent API rate limiting
          #APPSEC_DEBUG: 'true'        # Enable to see Semgrep version and debug info
          #APPSEC_LOG_LEVEL: 'DEBUG'   # Show detailed debugging information
        with:
          # AWS Bedrock Configuration (RECOMMENDED for client data security)
          ai-provider: 'aws_bedrock'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
          inference-profile-id: ${{ secrets.INFERENCE_PROFILE_ID }}  # Required for Claude Sonnet 4
          
          # Legacy AI providers (uncomment to use instead of AWS Bedrock)
          # ai-provider: 'openai'
          # openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          # claude-api-key: ${{ secrets.CLAUDE_API_KEY }}
          
          auto-fix: 'true'
          # auto-fix-mode: '3'  # Optional: 1=SAST+secrets, 2=dependencies, 3=both, 4=skip
          fail-on-critical: 'false'
          scan-level: 'critical-high'
          
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const totalFindings = '${{ steps.scanner.outputs.total-findings }}';
            const criticalFindings = '${{ steps.scanner.outputs.critical-findings }}';
            const highFindings = '${{ steps.scanner.outputs.high-findings }}';
            const secretsFound = '${{ steps.scanner.outputs.secrets-found }}';
            
            let comment = '## 🔒 Security Scan Results\n\n';
            comment += `**Total Findings:** ${totalFindings}\n`;
            comment += `**Critical:** ${criticalFindings}\n`;
            comment += `**High:** ${highFindings}\n`;
            comment += `**Secrets:** ${secretsFound}\n\n`;
            
            if (parseInt(criticalFindings) > 0 || parseInt(secretsFound) > 0) {
              comment += '❌ **Action Required:** Critical security issues found!\n\n';
            } else if (parseInt(highFindings) > 0) {
              comment += '⚠️ **Review Recommended:** High severity issues found.\n\n';
            } else {
              comment += '✅ **All Clear:** No critical security issues detected.\n\n';
            }
            
            comment += `📊 [View detailed reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
            comment += '*Powered by Imagine X AppSec AI Scanner*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 
